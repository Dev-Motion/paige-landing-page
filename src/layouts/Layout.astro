---
import Navbar from "@/components/Navbar.astro";
import Footer from "@/components/Footer.astro";
import "@fontsource-variable/rubik";

type Props = {
  title?: string;
};

const { title = "Paige - Your Personalized New Tab Companion" } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="description"
      content="Experience Paige, a Chrome extension that transforms every new tab into a personalized dashboard. Plan your day, navigate with ease, and customize your space. Enhance your browsing experience with Paige"
    />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="font-rubric">
    <Navbar />
    <slot />
    <Footer />
  </body>
</html>
<style is:global>
  :root {
    --nav-height: 64px;
  }
  .emphasize {
    display: inline-block;
  }
  .circle {
    height: 20vw;
    width: 20vw;
    max-height: 300px;
    max-width: 300px;
    min-height: 120px;
    min-width: 120px;
    border-radius: 999999px;
    position: absolute;
    opacity: 0.8;
  }
</style>
<script>
  import { animate, inView } from "motion";
  const circles = document.querySelectorAll(".circle");
  const DURATION = 6;
  const containers = ["cta-circle-container", "hero-circle-container"];
  function animateCircles() {
    containers.forEach((containerId) => {
      const container = document.getElementById(containerId);
      console.log(container);
      circles.forEach((circle) => {
        const width = container?.clientWidth ?? 0;
        const height = container?.clientHeight ?? 0;
        const containedWidth = width * 0.6;
        const containedHeight = height * 0.6;
        const x = Math.random() * containedWidth;
        const y = Math.random() * containedHeight;
        animate(
          circle,
          {
            x: x - containedWidth / 2,
            y: y - containedHeight / 2,
          },
          {
            easing: "linear",
            duration: DURATION,
          }
        );
      });
    });
  }
  animateCircles();
  setInterval(animateCircles, 3000);

  inView(".emphasize", ({ target }) => {
    animate(
      target,
      {
        scale: [1, 0.8, 1.4, 1.4, 1.4, 1.4, 1.4, 1],
        rotate: [0, 5, -5, 5, -5, 5, -5, 0],
      },
      {
        duration: 1.5,
        easing: "ease-in-out",
      }
    );
  });
</script>
